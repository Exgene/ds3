tree --
    collection of vertices and edges
        vertex is a node
        edge is the line connecting the vertices

tree terminology
    1. Root
    2. Parent
    3. Child
    4. Siblings
    5. Descendants
    6. Ancestors -- every vertex encountered while moving towards the Root
    7. Degree of a node - num of edges going out of a node
    8. Internal and external nodes (aka leaf and non-leaf nodes)
        - leaf node are nodes with degree 0, aka external node
        - non leaf nodes are also called internal nodes
    9. Levels -- 
    10. Height -- how many edges should we travel from the root to get to the nodes
    11. Forest -- collection of trees


Binary trees :
    - a tree with degree 2 
        ie. every node has utmost 2 nodes (left node and right node)
    - relation b/w Height and num or nodes
        min nodes = h + 1
        max nodes = 2^(h + 1) - 1 
            = 2^0 + 2^1 + 2^2 + 2^3 +... --> geometric progression


Representation of Trees - Array Representation
    for any node at index i,
        left child at 2*i, right child at (2*i)+1
    
    for any node at index i,
        its parent is at floor (i/2)

Representation of Trees - Linked Representation
    typedef struct node{
        struct node *left;
        char data;
        struct node *right;
    } NODE;

Full tree vs Complete tree


Tree traversal Methods

    we always start traversing the tree from the root
    -> Pre-Order
        * visit, left, right
        * visit a node, pre-order(left subtree), pre-order(right subtree)
    -> Post-Order
        * left, right, self
        * post-order(left subtree), post-order(right subtree), visit a node
    -> In-Order
        * left, self, right
        * in-order(left subtree), visit a node, in-order(right subtree)
    -> Level-Order
        * visit the nodes level by level

                       A    
                     /    \
                    B      C
                  /  \    /  \
                 D    E  F    G

    -> Pre-Order
        
    -> Post-Order
        
    -> In-Order
        
    -> Level-Order
       